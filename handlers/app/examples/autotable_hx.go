package examples

import (
	"previous/.jet/model"
	"previous/.jet/table"

	. "previous/ui"

	"github.com/go-jet/jet/v2/sqlite"

	. "maragu.dev/gomponents"
	. "maragu.dev/gomponents/html"

	"previous/database"
	"previous/orders"

	"net/http"
)

func AutoTableHxHandler(w http.ResponseWriter, r *http.Request) {
	filter := database.ParseFilterFromRequest(r)
	filter.Pagination.Enabled = true

	// fetch entities from filter function
	// this first counts the possible items before pagination
	searchItems, _ := orders.Filter(database.Filter{Search: filter.Search})

	// this query gets the data AFTER pagination
	orders, _ := orders.Filter(filter)

	// generate page numbers according to total length of data
	filter.Pagination.GeneratePagination(len(searchItems), len(orders))

	// You can automatically generate friendly names from the SQL columns:
	cols := database.GetColInfoFromJet(
		sqlite.ColumnList{
			table.Order.ID,
			table.Order.ProductID,
			table.Order.PurchaserName,
			table.Order.PurchaserEmail,
			table.Order.Price,
		},
	)

	// You can even grab EVERY column
	// Keep in mind the ordering of the columns is determined by the struct ordering (which is generated by jet at comptime)
	cols = database.GetColInfoFromJet(table.Order.AllColumns)

	// Or you can map them manually:
	cols = []database.ColInfo{
		{DbName: table.Order.ID.Name(), DisplayName: "ID"},
		{DbName: table.Order.ProductID.Name(), DisplayName: "Product ID"},
		{DbName: table.Order.PurchaserName.Name(), DisplayName: "Customer", Sortable: true},
		{DbName: table.Order.PurchaserEmail.Name(), DisplayName: "Customer Email", Sortable: true},
		{DbName: table.Order.Price.Name(), DisplayName: "Price (USD)", Sortable: true, DisplayPosition: database.COL_POS_RIGHT},
	}

	// Generate HTML
	func() Node {
		elId := "order_table"
		return AutoTable(
			elId,
			r.URL.Path,
			cols,
			filter,
			orders,
			AutotableSearchGroup(
				AutotableSearch(
					Placeholder("Search Customer Name..."),
					BindSearch(elId, table.Order.PurchaserName.Name()),
					AutoFocus(),
				),
				AutotableSearch(
					Placeholder("Search Customer Email..."),
					BindSearch(elId, table.Order.PurchaserEmail.Name()),
					AutoFocus(),
				),
				AutotableSearch(
					Placeholder("Price Min"),
					BindSearch(elId, table.Order.Price.Name()+"_left"),
				),
				AutotableSearch(
					Placeholder("Price Max"),
					BindSearch(elId, table.Order.Price.Name()+"_right"),
				),
			),
			func(order model.Order) Node {
				return Tr(
					TdLeft(B(ToText(order.ID))),
					TdLeft(ToText(order.ProductID)),
					TdLeft(ToText(order.PurchaserName)),
					TdLeft(ToText(order.PurchaserEmail)),
					TdMoney(int64(order.Price)),
				)
			},
			nil,
			AutoTableOptions{
				Compact:   false,
				Shadow:    true,
				Hover:     false,
				Alternate: false,
				BorderX:   true,
				BorderY:   false,
			},
		)
	}().Render(w)
}
